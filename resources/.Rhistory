titlePanel("My First Detailed App"),
# Sidebar with a slider input for number of bins
sidebarLayout(position = "left",
sidebarPanel(
helpText("This is for mtcars"),
sliderInput("RandomBins","Random Bins",min = 1,max = 50,value = 20),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput("variable", "Variable:",list("Cylinder" ="cyl","Trans" = "am")
),
conditionalPanel(condition = "input.variable=='am'",
sliderInput("bins","Bins for Cylinder",min=1,max=20,value=3)),
conditionalPanel(condition = "input.variable=='am'",
plotOutput("SliderOutput")),
helpText("This is for Iris"),
br(),
p("Maybe this is a paragraph."),
selectInput("IrisX", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
selectInput("IrisY", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
actionButton("plot_mtcars","Plot Mtcars"),
actionButton("plot_iris","Plot Iris"),
actionButton("plot_random","You can plot the distribution of random numbers here.")
),
# Show a plot of the generated distribution
mainPanel(
conditionalPanel(condition = "input$variable == whatever",
plotOutput("AMHist")
),
h1("First Heading"),
plotOutput("BinsOutput"),
plotOutput("RandomPlot"),
h2("Second Heading"),
p("Well, I have going to put a link here now"),
a("My blog baby", href="https://www.nepaliwanderer.com/"),
plotOutput("distPlot"),
p("Well, why not have a paragraph here also"),
plotOutput("IrisPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
iris_df <- iris
output$AMHist <- renderPlot({hist(mtcars[,'am'],col='red')})
output$SliderOutput <- renderPlot({plot(rnorm(50))})
observeEvent(input$plot_random,
output$RandomPlot <- renderPlot({
ggplot(mtcars,aes(wt))+geom_histogram(bins = input$RandomBins)
})
)
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#;x    <- as.numeric(mtcars[,input$variable])
#; bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(as.numeric(mtcars[,c(input$variable)]), breaks = input$bins, col = 'darkgray', border = 'white')
})
x <- reactive(input$bins)
output$BinsOutput <- renderPlot(hist(rnorm(x)))
observeEvent(input$plot_iris,output$IrisPlot <- renderPlot({
#ggplot(iris,aes(x=input$IrisX,y=input$IrisY))+geom_point()
#plot(iris[,input$IrisX],iris[,input$IrisY])
ggplot(iris,aes_string(input$IrisX,input$IrisY,col='Species'))+geom_point()
#hchart(iris_df, "scatter", hcaes(x = input$IrisX, y =input$IrisY))
#plot(iris_df[,input$IrisX],iris_df[,input$IrisY])
}) )
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#### ONE IMPORTANT FUCKING DISCOVERY ####
### All input related things, like select input and all, should be inside siderbar panel. Both sidebar panel and
### main panel are inside sidebarlayout.
#### Try to discover more you mofo ####
#### Fluid row brings the thing in row #####
#### Try that reactive thing. Cool thing. Try without one and try to see error.
library(shiny)
library(ggplot2)
library(highcharter)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("My First Detailed App"),
# Sidebar with a slider input for number of bins
sidebarLayout(position = "left",
sidebarPanel(
helpText("This is for mtcars"),
sliderInput("RandomBins","Random Bins",min = 1,max = 50,value = 20),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput("variable", "Variable:",list("Cylinder" ="cyl","Trans" = "am")
),
conditionalPanel(condition = "input.variable=='am'",
sliderInput("bins","Bins for Cylinder",min=1,max=20,value=3)),
conditionalPanel(condition = "input.variable=='am'",
plotOutput("SliderOutput")),
helpText("This is for Iris"),
br(),
p("Maybe this is a paragraph."),
selectInput("IrisX", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
selectInput("IrisY", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
actionButton("plot_mtcars","Plot Mtcars"),
actionButton("plot_iris","Plot Iris"),
actionButton("plot_random","You can plot the distribution of random numbers here.")
),
# Show a plot of the generated distribution
mainPanel(
conditionalPanel(condition = "input$variable == whatever",
plotOutput("AMHist")
),
h1("First Heading"),
plotOutput("BinsOutput"),
plotOutput("RandomPlot"),
h2("Second Heading"),
p("Well, I have going to put a link here now"),
a("My blog baby", href="https://www.nepaliwanderer.com/"),
plotOutput("distPlot"),
p("Well, why not have a paragraph here also"),
plotOutput("IrisPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
iris_df <- iris
output$AMHist <- renderPlot({hist(mtcars[,'am'],col='red')})
output$SliderOutput <- renderPlot({plot(rnorm(50))})
observeEvent(input$plot_random,
output$RandomPlot <- renderPlot({
ggplot(mtcars,aes(wt))+geom_histogram(bins = input$RandomBins)
})
)
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#;x    <- as.numeric(mtcars[,input$variable])
#; bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(as.numeric(mtcars[,c(input$variable)]), breaks = input$bins, col = 'darkgray', border = 'white')
})
# x <- reactive(input$bins)
output$BinsOutput <- renderPlot(hist(rnorm(input$bins)))
observeEvent(input$plot_iris,output$IrisPlot <- renderPlot({
#ggplot(iris,aes(x=input$IrisX,y=input$IrisY))+geom_point()
#plot(iris[,input$IrisX],iris[,input$IrisY])
ggplot(iris,aes_string(input$IrisX,input$IrisY,col='Species'))+geom_point()
#hchart(iris_df, "scatter", hcaes(x = input$IrisX, y =input$IrisY))
#plot(iris_df[,input$IrisX],iris_df[,input$IrisY])
}) )
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#### ONE IMPORTANT FUCKING DISCOVERY ####
### All input related things, like select input and all, should be inside siderbar panel. Both sidebar panel and
### main panel are inside sidebarlayout.
#### Try to discover more you mofo ####
#### Fluid row brings the thing in row #####
#### Try that reactive thing. Cool thing. Try without one and try to see error.
library(shiny)
library(ggplot2)
library(highcharter)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("My First Detailed App"),
# Sidebar with a slider input for number of bins
sidebarLayout(position = "left",
sidebarPanel(
helpText("This is for mtcars"),
sliderInput("RandomBins","Random Bins",min = 1,max = 50,value = 20),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput("variable", "Variable:",list("Cylinder" ="cyl","Trans" = "am")
),
conditionalPanel(condition = "input.variable=='am'",
sliderInput("bins","Bins for Cylinder",min=1,max=20,value=3)),
conditionalPanel(condition = "input.variable=='am'",
plotOutput("SliderOutput")),
helpText("This is for Iris"),
br(),
p("Maybe this is a paragraph."),
selectInput("IrisX", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
selectInput("IrisY", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
actionButton("plot_mtcars","Plot Mtcars"),
actionButton("plot_iris","Plot Iris"),
actionButton("plot_random","You can plot the distribution of random numbers here.")
),
# Show a plot of the generated distribution
mainPanel(
conditionalPanel(condition = "input$variable == whatever",
plotOutput("AMHist")
),
h1("First Heading"),
plotOutput("BinsOutput"),
plotOutput("RandomPlot"),
h2("Second Heading"),
p("Well, I have going to put a link here now"),
a("My blog baby", href="https://www.nepaliwanderer.com/"),
plotOutput("distPlot"),
p("Well, why not have a paragraph here also"),
plotOutput("IrisPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
iris_df <- iris
output$AMHist <- renderPlot({hist(mtcars[,'am'],col='red')})
output$SliderOutput <- renderPlot({plot(rnorm(50))})
observeEvent(input$plot_random,
output$RandomPlot <- renderPlot({
ggplot(mtcars,aes(wt))+geom_histogram(bins = input$RandomBins)
})
)
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#;x    <- as.numeric(mtcars[,input$variable])
#; bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(as.numeric(mtcars[,c(input$variable)]), breaks = input$bins, col = 'darkgray', border = 'white')
})
# x <- reactive(input$bins)
output$BinsOutput <- renderPlot(hist(rnorm(reactive(input$bins))))
observeEvent(input$plot_iris,output$IrisPlot <- renderPlot({
#ggplot(iris,aes(x=input$IrisX,y=input$IrisY))+geom_point()
#plot(iris[,input$IrisX],iris[,input$IrisY])
ggplot(iris,aes_string(input$IrisX,input$IrisY,col='Species'))+geom_point()
#hchart(iris_df, "scatter", hcaes(x = input$IrisX, y =input$IrisY))
#plot(iris_df[,input$IrisX],iris_df[,input$IrisY])
}) )
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#### ONE IMPORTANT FUCKING DISCOVERY ####
### All input related things, like select input and all, should be inside siderbar panel. Both sidebar panel and
### main panel are inside sidebarlayout.
#### Try to discover more you mofo ####
#### Fluid row brings the thing in row #####
#### Try that reactive thing. Cool thing. Try without one and try to see error.
library(shiny)
library(ggplot2)
library(highcharter)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("My First Detailed App"),
# Sidebar with a slider input for number of bins
sidebarLayout(position = "left",
sidebarPanel(
helpText("This is for mtcars"),
sliderInput("RandomBins","Random Bins",min = 1,max = 50,value = 20),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput("variable", "Variable:",list("Cylinder" ="cyl","Trans" = "am")
),
conditionalPanel(condition = "input.variable=='am'",
sliderInput("bins","Bins for Cylinder",min=1,max=20,value=3)),
conditionalPanel(condition = "input.variable=='am'",
plotOutput("SliderOutput")),
helpText("This is for Iris"),
br(),
p("Maybe this is a paragraph."),
selectInput("IrisX", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
selectInput("IrisY", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
actionButton("plot_mtcars","Plot Mtcars"),
actionButton("plot_iris","Plot Iris"),
actionButton("plot_random","You can plot the distribution of random numbers here.")
),
# Show a plot of the generated distribution
mainPanel(
conditionalPanel(condition = "input$variable == whatever",
plotOutput("AMHist")
),
h1("First Heading"),
plotOutput("BinsOutput"),
plotOutput("RandomPlot"),
h2("Second Heading"),
p("Well, I have going to put a link here now"),
a("My blog baby", href="https://www.nepaliwanderer.com/"),
plotOutput("distPlot"),
p("Well, why not have a paragraph here also"),
plotOutput("IrisPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
iris_df <- iris
output$AMHist <- renderPlot({hist(mtcars[,'am'],col='red')})
output$SliderOutput <- renderPlot({plot(rnorm(50))})
observeEvent(input$plot_random,
output$RandomPlot <- renderPlot({
ggplot(mtcars,aes(wt))+geom_histogram(bins = input$RandomBins)
})
)
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#;x    <- as.numeric(mtcars[,input$variable])
#; bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(as.numeric(mtcars[,c(input$variable)]), breaks = input$bins, col = 'darkgray', border = 'white')
})
x <- reactive(input$bins)
output$BinsOutput <- renderPlot(hist(rnorm(x)))
observeEvent(input$plot_iris,output$IrisPlot <- renderPlot({
#ggplot(iris,aes(x=input$IrisX,y=input$IrisY))+geom_point()
#plot(iris[,input$IrisX],iris[,input$IrisY])
ggplot(iris,aes_string(input$IrisX,input$IrisY,col='Species'))+geom_point()
#hchart(iris_df, "scatter", hcaes(x = input$IrisX, y =input$IrisY))
#plot(iris_df[,input$IrisX],iris_df[,input$IrisY])
}) )
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#### ONE IMPORTANT FUCKING DISCOVERY ####
### All input related things, like select input and all, should be inside siderbar panel. Both sidebar panel and
### main panel are inside sidebarlayout.
#### Try to discover more you mofo ####
#### Fluid row brings the thing in row #####
#### Try that reactive thing. Cool thing. Try without one and try to see error.
library(shiny)
library(ggplot2)
library(highcharter)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("My First Detailed App"),
# Sidebar with a slider input for number of bins
sidebarLayout(position = "left",
sidebarPanel(
helpText("This is for mtcars"),
sliderInput("RandomBins","Random Bins",min = 1,max = 50,value = 20),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput("variable", "Variable:",list("Cylinder" ="cyl","Trans" = "am")
),
conditionalPanel(condition = "input.variable=='am'",
sliderInput("bins","Bins for Cylinder",min=1,max=20,value=3)),
conditionalPanel(condition = "input.variable=='am'",
plotOutput("SliderOutput")),
helpText("This is for Iris"),
br(),
p("Maybe this is a paragraph."),
selectInput("IrisX", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
selectInput("IrisY", "Iris Variable:",list("Sepal.Length" ="Sepal.Length","Sepal.Width" = "Sepal.Width",
"Petal.Length"="Petal.Length", "Petal.Width"="Petal.Width")
),
actionButton("plot_mtcars","Plot Mtcars"),
actionButton("plot_iris","Plot Iris"),
actionButton("plot_random","You can plot the distribution of random numbers here.")
),
# Show a plot of the generated distribution
mainPanel(
conditionalPanel(condition = "input$variable == whatever",
plotOutput("AMHist")
),
h1("First Heading"),
plotOutput("BinsOutput"),
plotOutput("RandomPlot"),
h2("Second Heading"),
p("Well, I have going to put a link here now"),
a("My blog baby", href="https://www.nepaliwanderer.com/"),
plotOutput("distPlot"),
p("Well, why not have a paragraph here also"),
plotOutput("IrisPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
iris_df <- iris
output$AMHist <- renderPlot({hist(mtcars[,'am'],col='red')})
output$SliderOutput <- renderPlot({plot(rnorm(50))})
observeEvent(input$plot_random,
output$RandomPlot <- renderPlot({
ggplot(mtcars,aes(wt))+geom_histogram(bins = input$RandomBins)
})
)
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#;x    <- as.numeric(mtcars[,input$variable])
#; bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(as.numeric(mtcars[,c(input$variable)]), breaks = input$bins, col = 'darkgray', border = 'white')
})
x <- reactive({input$bins})
output$BinsOutput <- renderPlot(hist(rnorm(x)))
observeEvent(input$plot_iris,output$IrisPlot <- renderPlot({
#ggplot(iris,aes(x=input$IrisX,y=input$IrisY))+geom_point()
#plot(iris[,input$IrisX],iris[,input$IrisY])
ggplot(iris,aes_string(input$IrisX,input$IrisY,col='Species'))+geom_point()
#hchart(iris_df, "scatter", hcaes(x = input$IrisX, y =input$IrisY))
#plot(iris_df[,input$IrisX],iris_df[,input$IrisY])
}) )
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny); runApp('Desktop/Office/Shiny/Recommendation.R')
read.csv(file.choose())
myfile <- read.csv(file.choose())
dim(myfile)
head(myfile)
my_file[1,1:5]
myfile[1,1:5]
myfile[1,1:10]
myfile[1:5,1:5]
myfile <- read.csv(file.choose())
dim(myfile)
myfile <- read.csv(file.choose())
dim(myfile)
myfile <- read.csv(file.choose())
dim(myfile)
myfile <- read.csv(file.choose())
dim(myfile)
myfile[1:3,1:3]
colnames(myfile)[1:10]
myfile[1:5,1:10]
View(myfile[1:5,1:10])
myfile <- read.csv(file.choose())
dim(myfile)
myfile <- read.csv(file.choose())
dim(myfile)
install.packages('ontologyIndex')
library(ontologyIndex)
ontology <- get_OBO(file.choose())
install.packages('rdflib')
library(rdflib)
doc <- system.file(file.choose(), package="redland")
rdf <- rdf_parse(doc, format = "rdfxml")
rdf
typeof(doc)
doc
doc <- system.file(file.choose(), package="redland")
typeof(doc)
doc
doc <- system.file(file.choose(), package="redland")
doc
doc <- system.file(file.choose(), "dc.rdf", package="redland")
doc
rdf <- rdf_parse(doc)
setwd("~/Desktop/Office/Gitlab Projects/sicp/resources")
mtcars
data
df = mtcars
df
df <- df['mpg','disp','hp','drat','wt']
df <- df[,c('mpg','disp','hp','drat','wt')]
df
write.csv(df,"mtcars.csv",row.names = FALSE)
